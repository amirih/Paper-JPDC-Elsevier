	.text
	.file	"AIC3.c"
	.globl	assignToThisCore12      # -- Begin function assignToThisCore12
	.p2align	4, 0x90
	.type	assignToThisCore12,@function
assignToThisCore12:                     # @assignToThisCore12
	.cfi_startproc
# %bb.0:
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%ymm0, mask+96(%rip)
	vmovups	%ymm0, mask+64(%rip)
	vmovups	%ymm0, mask+32(%rip)
	vmovups	%ymm0, mask(%rip)
	cmpl	$1023, %edi             # imm = 0x3FF
	jbe	.LBB0_1
# %bb.2:
	cmpl	$1023, %esi             # imm = 0x3FF
	jbe	.LBB0_3
.LBB0_4:
	movl	$128, %esi
	movl	$mask, %edx
	xorl	%edi, %edi
	vzeroupper
	jmp	sched_setaffinity       # TAILCALL
.LBB0_1:
	movslq	%edi, %rax
	movl	$1, %ecx
	shlxq	%rax, %rcx, %rcx
	shrq	$6, %rax
	orq	%rcx, mask(,%rax,8)
	cmpl	$1023, %esi             # imm = 0x3FF
	ja	.LBB0_4
.LBB0_3:
	movslq	%esi, %rax
	movl	$1, %ecx
	shlxq	%rax, %rcx, %rcx
	shrq	$6, %rax
	orq	%rcx, mask(,%rax,8)
	movl	$128, %esi
	movl	$mask, %edx
	xorl	%edi, %edi
	vzeroupper
	jmp	sched_setaffinity       # TAILCALL
.Lfunc_end0:
	.size	assignToThisCore12, .Lfunc_end0-assignToThisCore12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function assignImagef32
.LCPI1_0:
	.quad	4536524183238306033     # double 2.0000000000000002E-5
.LCPI1_1:
	.quad	4593527504729830064     # double 0.123
.LCPI1_2:
	.quad	4532020583610935537     # double 1.0000000000000001E-5
	.text
	.globl	assignImagef32
	.p2align	4, 0x90
	.type	assignImagef32,@function
assignImagef32:                         # @assignImagef32
	.cfi_startproc
# %bb.0:
	addq	$4, %rdi
	xorl	%r9d, %r9d
	vmovsd	.LCPI1_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	.LCPI1_1(%rip), %xmm1   # xmm1 = mem[0],zero
	vmovsd	.LCPI1_2(%rip), %xmm2   # xmm2 = mem[0],zero
	.p2align	4, 0x90
.LBB1_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_2 Depth 2
	vcvtsi2sdl	%r9d, %xmm6, %xmm3
	vfmadd213sd	%xmm1, %xmm0, %xmm3 # xmm3 = (xmm0 * xmm3) + xmm1
	xorl	%r10d, %r10d
	.p2align	4, 0x90
.LBB1_2:                                #   Parent Loop BB1_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%r10d, %ecx
	leal	1(%r10), %r8d
	movl	%r9d, %eax
	xorl	%edx, %edx
	divl	%r8d
	imull	%r9d, %ecx
	addl	%r9d, %ecx
	movl	%r10d, %esi
	addl	%ecx, %eax
	movl	%eax, %ecx
	shrl	%ecx
	imulq	$1195121335, %rcx, %rcx # imm = 0x473C1AB7
	shrq	$37, %rcx
	imull	$230, %ecx, %ecx
	subl	%ecx, %eax
	vcvtsi2sdl	%eax, %xmm6, %xmm4
	vcvtsi2sdl	%r10d, %xmm6, %xmm5
	vfmadd213sd	%xmm3, %xmm2, %xmm5 # xmm5 = (xmm2 * xmm5) + xmm3
	vaddsd	%xmm4, %xmm5, %xmm4
	vcvtsd2ss	%xmm4, %xmm4, %xmm4
	vmovss	%xmm4, -4(%rdi,%r10,4)
	orl	$1, %esi
	imull	%r9d, %esi
	leaq	2(%r10), %rcx
	movl	%r9d, %eax
	xorl	%edx, %edx
	divl	%ecx
	addl	%r9d, %esi
	addl	%esi, %eax
	movl	%eax, %edx
	shrl	%edx
	imulq	$1195121335, %rdx, %rdx # imm = 0x473C1AB7
	shrq	$37, %rdx
	imull	$230, %edx, %edx
	subl	%edx, %eax
	vcvtsi2sdl	%eax, %xmm6, %xmm4
	vcvtsi2sdl	%r8d, %xmm6, %xmm5
	vfmadd213sd	%xmm3, %xmm2, %xmm5 # xmm5 = (xmm2 * xmm5) + xmm3
	vaddsd	%xmm4, %xmm5, %xmm4
	vcvtsd2ss	%xmm4, %xmm4, %xmm4
	vmovss	%xmm4, (%rdi,%r10,4)
	movq	%rcx, %r10
	cmpq	$256, %rcx              # imm = 0x100
	jne	.LBB1_2
# %bb.3:                                #   in Loop: Header=BB1_1 Depth=1
	addq	$1, %r9
	addq	$1040, %rdi             # imm = 0x410
	cmpq	$256, %r9               # imm = 0x100
	jne	.LBB1_1
# %bb.4:
	retq
.Lfunc_end1:
	.size	assignImagef32, .Lfunc_end1-assignImagef32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function assignMatrixf32
.LCPI2_0:
	.quad	4593527504729830064     # double 0.123
	.text
	.globl	assignMatrixf32
	.p2align	4, 0x90
	.type	assignMatrixf32,@function
assignMatrixf32:                        # @assignMatrixf32
	.cfi_startproc
# %bb.0:
	xorl	%r8d, %r8d
	vmovsd	.LCPI2_0(%rip), %xmm0   # xmm0 = mem[0],zero
	.p2align	4, 0x90
.LBB2_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_2 Depth 2
	movl	$1, %esi
	movl	$2, %r9d
	xorl	%r10d, %r10d
	.p2align	4, 0x90
.LBB2_2:                                #   Parent Loop BB2_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%r8d, %eax
	xorl	%edx, %edx
	divl	%esi
                                        # kill: def $eax killed $eax def $rax
	movl	%r10d, %edx
	imull	%r8d, %edx
	addl	%edx, %eax
	imulq	$274877907, %rax, %rdx  # imm = 0x10624DD3
	shrq	$38, %rdx
	imull	$1000, %edx, %edx       # imm = 0x3E8
	subl	%edx, %eax
	vcvtsi2sdl	%eax, %xmm2, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm1
	vcvtsd2ss	%xmm1, %xmm1, %xmm1
	movl	%r10d, %ecx
	vmovss	%xmm1, -4(%rdi,%rsi,4)
	movl	%r8d, %eax
	xorl	%edx, %edx
	divl	%r9d
                                        # kill: def $eax killed $eax def $rax
	orl	$1, %ecx
	imull	%r8d, %ecx
	addl	%ecx, %eax
	imulq	$274877907, %rax, %rcx  # imm = 0x10624DD3
	shrq	$38, %rcx
	imull	$1000, %ecx, %ecx       # imm = 0x3E8
	subl	%ecx, %eax
	vcvtsi2sdl	%eax, %xmm2, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm1
	vcvtsd2ss	%xmm1, %xmm1, %xmm1
	addq	$2, %r10
	vmovss	%xmm1, (%rdi,%rsi,4)
	addq	$2, %rsi
	addl	$2, %r9d
	cmpq	$257, %rsi              # imm = 0x101
	jne	.LBB2_2
# %bb.3:                                #   in Loop: Header=BB2_1 Depth=1
	addq	$1, %r8
	addq	$1024, %rdi             # imm = 0x400
	cmpq	$256, %r8               # imm = 0x100
	jne	.LBB2_1
# %bb.4:
	retq
.Lfunc_end2:
	.size	assignMatrixf32, .Lfunc_end2-assignMatrixf32
	.cfi_endproc
                                        # -- End function
	.globl	assignImagei32          # -- Begin function assignImagei32
	.p2align	4, 0x90
	.type	assignImagei32,@function
assignImagei32:                         # @assignImagei32
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	xorl	%r9d, %r9d
	movl	$2155905153, %r8d       # imm = 0x80808081
	.p2align	4, 0x90
.LBB3_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_2 Depth 2
	movl	$1, %esi
	movl	$2, %r10d
	xorl	%r11d, %r11d
	.p2align	4, 0x90
.LBB3_2:                                #   Parent Loop BB3_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%r11d, %ecx
	movl	%r9d, %eax
	xorl	%edx, %edx
	divl	%esi
                                        # kill: def $eax killed $eax def $rax
	imull	%r9d, %ecx
	movl	%r11d, %ebx
	orl	$1, %ebx
	addl	%ecx, %eax
	movq	%rax, %rcx
	imulq	%r8, %rcx
	shrq	$39, %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	subl	%edx, %ecx
	addl	%eax, %ecx
	movl	%ecx, -4(%rdi,%rsi,4)
	movl	%r9d, %eax
	xorl	%edx, %edx
	divl	%r10d
                                        # kill: def $eax killed $eax def $rax
	imull	%r9d, %ebx
	addq	$2, %r11
	addl	%ebx, %eax
	movq	%rax, %rcx
	imulq	%r8, %rcx
	shrq	$39, %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	subl	%edx, %ecx
	addl	%eax, %ecx
	movl	%ecx, (%rdi,%rsi,4)
	addq	$2, %rsi
	addl	$2, %r10d
	cmpq	$257, %rsi              # imm = 0x101
	jne	.LBB3_2
# %bb.3:                                #   in Loop: Header=BB3_1 Depth=1
	addq	$1, %r9
	addq	$1040, %rdi             # imm = 0x410
	cmpq	$256, %r9               # imm = 0x100
	jne	.LBB3_1
# %bb.4:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end3:
	.size	assignImagei32, .Lfunc_end3-assignImagei32
	.cfi_endproc
                                        # -- End function
	.globl	assignMatrixi32         # -- Begin function assignMatrixi32
	.p2align	4, 0x90
	.type	assignMatrixi32,@function
assignMatrixi32:                        # @assignMatrixi32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	addq	$12, %rdi
	xorl	%r8d, %r8d
	xorl	%r11d, %r11d
	xorl	%r9d, %r9d
	xorl	%r10d, %r10d
	.p2align	4, 0x90
.LBB4_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_2 Depth 2
	xorl	%r13d, %r13d
	movl	%r10d, %ebp
	movl	%r8d, %esi
	movl	%r9d, %ecx
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB4_2:                                #   Parent Loop BB4_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%ecx, %eax
	imulq	$274877907, %rax, %rax  # imm = 0x10624DD3
	shrq	$38, %rax
	imull	$1000, %eax, %eax       # imm = 0x3E8
	movl	%ecx, %r14d
	subl	%eax, %r14d
	movl	%esi, %eax
	imulq	$274877907, %rax, %rax  # imm = 0x10624DD3
	shrq	$38, %rax
	imull	$1000, %eax, %r15d      # imm = 0x3E8
	movl	%esi, %r12d
	subl	%r15d, %r12d
	movl	%ebp, %eax
	imulq	$274877907, %rax, %rax  # imm = 0x10624DD3
	shrq	$38, %rax
	imull	$1000, %eax, %eax       # imm = 0x3E8
	movl	%ebp, %edx
	subl	%eax, %edx
	movl	%r13d, %eax
	imulq	$274877907, %rax, %rax  # imm = 0x10624DD3
	shrq	$38, %rax
	imull	$1000, %eax, %r15d      # imm = 0x3E8
	movl	%r13d, %eax
	subl	%r15d, %eax
	movl	%eax, -12(%rdi,%rbx,4)
	movl	%edx, -8(%rdi,%rbx,4)
	movl	%r12d, -4(%rdi,%rbx,4)
	movl	%r14d, (%rdi,%rbx,4)
	addq	$4, %rbx
	addl	%r11d, %ecx
	addl	%r11d, %esi
	addl	%r11d, %ebp
	addl	%r11d, %r13d
	cmpq	$256, %rbx              # imm = 0x100
	jne	.LBB4_2
# %bb.3:                                #   in Loop: Header=BB4_1 Depth=1
	addq	$1, %r10
	addl	$3, %r9d
	addl	$4, %r11d
	addq	$1024, %rdi             # imm = 0x400
	addl	$2, %r8d
	cmpq	$256, %r10              # imm = 0x100
	jne	.LBB4_1
# %bb.4:
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end4:
	.size	assignMatrixi32, .Lfunc_end4-assignMatrixi32
	.cfi_endproc
                                        # -- End function
	.globl	assignMatrixi16         # -- Begin function assignMatrixi16
	.p2align	4, 0x90
	.type	assignMatrixi16,@function
assignMatrixi16:                        # @assignMatrixi16
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB5_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_2 Depth 2
	xorl	%ebp, %ebp
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB5_2:                                #   Parent Loop BB5_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%ebp, %eax
	shrl	%eax
	imulq	$558694933, %rax, %rax  # imm = 0x214D0215
	shrq	$36, %rax
	imull	$246, %eax, %eax
	movl	%ebp, %r12d
	subl	%eax, %r12d
	callq	rand
	cltq
	imulq	$1717986919, %rax, %rcx # imm = 0x66666667
	movq	%rcx, %rdx
	shrq	$63, %rdx
	sarq	$34, %rcx
	addl	%edx, %ecx
	addl	%ecx, %ecx
	leal	(%rcx,%rcx,4), %ecx
	subl	%ecx, %eax
	addl	%r12d, %eax
	movw	%ax, (%r14,%rbx,2)
	addq	$1, %rbx
	addl	%r15d, %ebp
	cmpq	$256, %rbx              # imm = 0x100
	jne	.LBB5_2
# %bb.3:                                #   in Loop: Header=BB5_1 Depth=1
	addq	$1, %r15
	addq	$512, %r14              # imm = 0x200
	cmpq	$256, %r15              # imm = 0x100
	jne	.LBB5_1
# %bb.4:
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end5:
	.size	assignMatrixi16, .Lfunc_end5-assignMatrixi16
	.cfi_endproc
                                        # -- End function
	.globl	assignImagei16          # -- Begin function assignImagei16
	.p2align	4, 0x90
	.type	assignImagei16,@function
assignImagei16:                         # @assignImagei16
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB6_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_2 Depth 2
	xorl	%ebp, %ebp
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB6_2:                                #   Parent Loop BB6_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%ebp, %eax
	shrl	%eax
	imulq	$558694933, %rax, %rax  # imm = 0x214D0215
	shrq	$36, %rax
	imull	$246, %eax, %eax
	movl	%ebp, %r12d
	subl	%eax, %r12d
	callq	rand
	cltq
	imulq	$1717986919, %rax, %rcx # imm = 0x66666667
	movq	%rcx, %rdx
	shrq	$63, %rdx
	sarq	$34, %rcx
	addl	%edx, %ecx
	addl	%ecx, %ecx
	leal	(%rcx,%rcx,4), %ecx
	subl	%ecx, %eax
	addl	%r12d, %eax
	movw	%ax, (%r14,%rbx,2)
	addq	$1, %rbx
	addl	%r15d, %ebp
	cmpq	$256, %rbx              # imm = 0x100
	jne	.LBB6_2
# %bb.3:                                #   in Loop: Header=BB6_1 Depth=1
	addq	$1, %r15
	addq	$512, %r14              # imm = 0x200
	cmpq	$256, %r15              # imm = 0x100
	jne	.LBB6_1
# %bb.4:
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end6:
	.size	assignImagei16, .Lfunc_end6-assignImagei16
	.cfi_endproc
                                        # -- End function
	.globl	imageTranspose          # -- Begin function imageTranspose
	.p2align	4, 0x90
	.type	imageTranspose,@function
imageTranspose:                         # @imageTranspose
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	leaq	12(%rdi), %rdx
	.p2align	4, 0x90
.LBB7_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_5 Depth 2
                                        #     Child Loop BB7_8 Depth 2
	testq	%r9, %r9
	je	.LBB7_9
# %bb.2:                                #   in Loop: Header=BB7_1 Depth=1
	movl	%r9d, %r10d
	andl	$3, %r10d
	leaq	-1(%r9), %rax
	cmpq	$3, %rax
	jae	.LBB7_4
# %bb.3:                                #   in Loop: Header=BB7_1 Depth=1
	xorl	%ecx, %ecx
	testb	$3, %r9b
	jne	.LBB7_7
	jmp	.LBB7_9
	.p2align	4, 0x90
.LBB7_4:                                #   in Loop: Header=BB7_1 Depth=1
	movq	%r9, %r11
	subq	%r10, %r11
	movq	%r8, %rsi
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB7_5:                                #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rdx,%rcx,4), %eax
	movl	(%rsi), %ebx
	movl	%ebx, -12(%rdx,%rcx,4)
	movl	%eax, (%rsi)
	movl	-8(%rdx,%rcx,4), %eax
	movl	1036(%rsi), %ebx
	movl	%ebx, -8(%rdx,%rcx,4)
	movl	%eax, 1036(%rsi)
	movl	-4(%rdx,%rcx,4), %eax
	movl	2072(%rsi), %ebx
	movl	%ebx, -4(%rdx,%rcx,4)
	movl	%eax, 2072(%rsi)
	movl	(%rdx,%rcx,4), %eax
	movl	3108(%rsi), %ebx
	movl	%ebx, (%rdx,%rcx,4)
	movl	%eax, 3108(%rsi)
	addq	$4, %rcx
	addq	$4144, %rsi             # imm = 0x1030
	cmpq	%rcx, %r11
	jne	.LBB7_5
# %bb.6:                                #   in Loop: Header=BB7_1 Depth=1
	testb	$3, %r9b
	je	.LBB7_9
.LBB7_7:                                #   in Loop: Header=BB7_1 Depth=1
	imulq	$1036, %rcx, %rax       # imm = 0x40C
	addq	%r8, %rax
	leaq	(%rdi,%rcx,4), %r11
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB7_8:                                #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%r11,%rsi,4), %ebx
	movl	(%rax), %ecx
	movl	%ecx, (%r11,%rsi,4)
	movl	%ebx, (%rax)
	addq	$1036, %rax             # imm = 0x40C
	addq	$1, %rsi
	cmpq	%rsi, %r10
	jne	.LBB7_8
.LBB7_9:                                #   in Loop: Header=BB7_1 Depth=1
	addq	$1, %r9
	addq	$1036, %rdx             # imm = 0x40C
	addq	$4, %r8
	addq	$1036, %rdi             # imm = 0x40C
	cmpq	$256, %r9               # imm = 0x100
	jne	.LBB7_1
# %bb.10:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end7:
	.size	imageTranspose, .Lfunc_end7-imageTranspose
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5               # -- Begin function assignMatrixui16
.LCPI8_0:
	.byte	0                       # 0x0
	.byte	1                       # 0x1
	.byte	4                       # 0x4
	.byte	5                       # 0x5
	.byte	8                       # 0x8
	.byte	9                       # 0x9
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	8                       # 0x8
	.byte	9                       # 0x9
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	14                      # 0xe
	.byte	15                      # 0xf
	.byte	16                      # 0x10
	.byte	17                      # 0x11
	.byte	20                      # 0x14
	.byte	21                      # 0x15
	.byte	24                      # 0x18
	.byte	25                      # 0x19
	.byte	28                      # 0x1c
	.byte	29                      # 0x1d
	.byte	24                      # 0x18
	.byte	25                      # 0x19
	.byte	28                      # 0x1c
	.byte	29                      # 0x1d
	.byte	28                      # 0x1c
	.byte	29                      # 0x1d
	.byte	30                      # 0x1e
	.byte	31                      # 0x1f
.LCPI8_1:
	.short	10                      # 0xa
	.short	11                      # 0xb
	.short	12                      # 0xc
	.short	13                      # 0xd
	.short	14                      # 0xe
	.short	15                      # 0xf
	.short	16                      # 0x10
	.short	17                      # 0x11
	.short	18                      # 0x12
	.short	19                      # 0x13
	.short	20                      # 0x14
	.short	21                      # 0x15
	.short	22                      # 0x16
	.short	23                      # 0x17
	.short	24                      # 0x18
	.short	25                      # 0x19
.LCPI8_2:
	.short	26                      # 0x1a
	.short	27                      # 0x1b
	.short	28                      # 0x1c
	.short	29                      # 0x1d
	.short	30                      # 0x1e
	.short	31                      # 0x1f
	.short	32                      # 0x20
	.short	33                      # 0x21
	.short	34                      # 0x22
	.short	35                      # 0x23
	.short	36                      # 0x24
	.short	37                      # 0x25
	.short	38                      # 0x26
	.short	39                      # 0x27
	.short	40                      # 0x28
	.short	41                      # 0x29
.LCPI8_4:
	.short	42                      # 0x2a
	.short	43                      # 0x2b
	.short	44                      # 0x2c
	.short	45                      # 0x2d
	.short	46                      # 0x2e
	.short	47                      # 0x2f
	.short	48                      # 0x30
	.short	49                      # 0x31
	.short	50                      # 0x32
	.short	51                      # 0x33
	.short	52                      # 0x34
	.short	53                      # 0x35
	.short	54                      # 0x36
	.short	55                      # 0x37
	.short	56                      # 0x38
	.short	57                      # 0x39
.LCPI8_5:
	.short	58                      # 0x3a
	.short	59                      # 0x3b
	.short	60                      # 0x3c
	.short	61                      # 0x3d
	.short	62                      # 0x3e
	.short	63                      # 0x3f
	.short	64                      # 0x40
	.short	65                      # 0x41
	.short	66                      # 0x42
	.short	67                      # 0x43
	.short	68                      # 0x44
	.short	69                      # 0x45
	.short	70                      # 0x46
	.short	71                      # 0x47
	.short	72                      # 0x48
	.short	73                      # 0x49
.LCPI8_6:
	.short	74                      # 0x4a
	.short	75                      # 0x4b
	.short	76                      # 0x4c
	.short	77                      # 0x4d
	.short	78                      # 0x4e
	.short	79                      # 0x4f
	.short	80                      # 0x50
	.short	81                      # 0x51
	.short	82                      # 0x52
	.short	83                      # 0x53
	.short	84                      # 0x54
	.short	85                      # 0x55
	.short	86                      # 0x56
	.short	87                      # 0x57
	.short	88                      # 0x58
	.short	89                      # 0x59
.LCPI8_7:
	.short	90                      # 0x5a
	.short	91                      # 0x5b
	.short	92                      # 0x5c
	.short	93                      # 0x5d
	.short	94                      # 0x5e
	.short	95                      # 0x5f
	.short	96                      # 0x60
	.short	97                      # 0x61
	.short	98                      # 0x62
	.short	99                      # 0x63
	.short	100                     # 0x64
	.short	101                     # 0x65
	.short	102                     # 0x66
	.short	103                     # 0x67
	.short	104                     # 0x68
	.short	105                     # 0x69
.LCPI8_8:
	.short	106                     # 0x6a
	.short	107                     # 0x6b
	.short	108                     # 0x6c
	.short	109                     # 0x6d
	.short	110                     # 0x6e
	.short	111                     # 0x6f
	.short	112                     # 0x70
	.short	113                     # 0x71
	.short	114                     # 0x72
	.short	115                     # 0x73
	.short	116                     # 0x74
	.short	117                     # 0x75
	.short	118                     # 0x76
	.short	119                     # 0x77
	.short	120                     # 0x78
	.short	121                     # 0x79
.LCPI8_9:
	.short	122                     # 0x7a
	.short	123                     # 0x7b
	.short	124                     # 0x7c
	.short	125                     # 0x7d
	.short	126                     # 0x7e
	.short	127                     # 0x7f
	.short	128                     # 0x80
	.short	129                     # 0x81
	.short	130                     # 0x82
	.short	131                     # 0x83
	.short	132                     # 0x84
	.short	133                     # 0x85
	.short	134                     # 0x86
	.short	135                     # 0x87
	.short	136                     # 0x88
	.short	137                     # 0x89
.LCPI8_10:
	.short	138                     # 0x8a
	.short	139                     # 0x8b
	.short	140                     # 0x8c
	.short	141                     # 0x8d
	.short	142                     # 0x8e
	.short	143                     # 0x8f
	.short	144                     # 0x90
	.short	145                     # 0x91
	.short	146                     # 0x92
	.short	147                     # 0x93
	.short	148                     # 0x94
	.short	149                     # 0x95
	.short	150                     # 0x96
	.short	151                     # 0x97
	.short	152                     # 0x98
	.short	153                     # 0x99
.LCPI8_11:
	.short	154                     # 0x9a
	.short	155                     # 0x9b
	.short	156                     # 0x9c
	.short	157                     # 0x9d
	.short	158                     # 0x9e
	.short	159                     # 0x9f
	.short	160                     # 0xa0
	.short	161                     # 0xa1
	.short	162                     # 0xa2
	.short	163                     # 0xa3
	.short	164                     # 0xa4
	.short	165                     # 0xa5
	.short	166                     # 0xa6
	.short	167                     # 0xa7
	.short	168                     # 0xa8
	.short	169                     # 0xa9
.LCPI8_12:
	.short	170                     # 0xaa
	.short	171                     # 0xab
	.short	172                     # 0xac
	.short	173                     # 0xad
	.short	174                     # 0xae
	.short	175                     # 0xaf
	.short	176                     # 0xb0
	.short	177                     # 0xb1
	.short	178                     # 0xb2
	.short	179                     # 0xb3
	.short	180                     # 0xb4
	.short	181                     # 0xb5
	.short	182                     # 0xb6
	.short	183                     # 0xb7
	.short	184                     # 0xb8
	.short	185                     # 0xb9
.LCPI8_13:
	.short	186                     # 0xba
	.short	187                     # 0xbb
	.short	188                     # 0xbc
	.short	189                     # 0xbd
	.short	190                     # 0xbe
	.short	191                     # 0xbf
	.short	192                     # 0xc0
	.short	193                     # 0xc1
	.short	194                     # 0xc2
	.short	195                     # 0xc3
	.short	196                     # 0xc4
	.short	197                     # 0xc5
	.short	198                     # 0xc6
	.short	199                     # 0xc7
	.short	200                     # 0xc8
	.short	201                     # 0xc9
.LCPI8_14:
	.short	202                     # 0xca
	.short	203                     # 0xcb
	.short	204                     # 0xcc
	.short	205                     # 0xcd
	.short	206                     # 0xce
	.short	207                     # 0xcf
	.short	208                     # 0xd0
	.short	209                     # 0xd1
	.short	210                     # 0xd2
	.short	211                     # 0xd3
	.short	212                     # 0xd4
	.short	213                     # 0xd5
	.short	214                     # 0xd6
	.short	215                     # 0xd7
	.short	216                     # 0xd8
	.short	217                     # 0xd9
.LCPI8_15:
	.short	218                     # 0xda
	.short	219                     # 0xdb
	.short	220                     # 0xdc
	.short	221                     # 0xdd
	.short	222                     # 0xde
	.short	223                     # 0xdf
	.short	224                     # 0xe0
	.short	225                     # 0xe1
	.short	226                     # 0xe2
	.short	227                     # 0xe3
	.short	228                     # 0xe4
	.short	229                     # 0xe5
	.short	230                     # 0xe6
	.short	231                     # 0xe7
	.short	232                     # 0xe8
	.short	233                     # 0xe9
.LCPI8_16:
	.short	234                     # 0xea
	.short	235                     # 0xeb
	.short	236                     # 0xec
	.short	237                     # 0xed
	.short	238                     # 0xee
	.short	239                     # 0xef
	.short	240                     # 0xf0
	.short	241                     # 0xf1
	.short	242                     # 0xf2
	.short	243                     # 0xf3
	.short	244                     # 0xf4
	.short	245                     # 0xf5
	.short	246                     # 0xf6
	.short	247                     # 0xf7
	.short	248                     # 0xf8
	.short	249                     # 0xf9
.LCPI8_17:
	.short	250                     # 0xfa
	.short	251                     # 0xfb
	.short	252                     # 0xfc
	.short	253                     # 0xfd
	.short	254                     # 0xfe
	.short	255                     # 0xff
	.short	256                     # 0x100
	.short	257                     # 0x101
	.short	258                     # 0x102
	.short	259                     # 0x103
	.short	260                     # 0x104
	.short	261                     # 0x105
	.short	262                     # 0x106
	.short	263                     # 0x107
	.short	264                     # 0x108
	.short	265                     # 0x109
	.section	.rodata,"a",@progbits
	.p2align	1
.LCPI8_3:
	.short	255                     # 0xff
	.text
	.globl	assignMatrixui16
	.p2align	4, 0x90
	.type	assignMatrixui16,@function
assignMatrixui16:                       # @assignMatrixui16
	.cfi_startproc
# %bb.0:
	addq	$480, %rdi              # imm = 0x1E0
	xorl	%eax, %eax
	vpbroadcastw	.LCPI8_3(%rip), %ymm3 # ymm3 = [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255]
	vmovdqa	.LCPI8_5(%rip), %ymm5   # ymm5 = [58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73]
	vmovdqa	.LCPI8_6(%rip), %ymm6   # ymm6 = [74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89]
	vmovdqa	.LCPI8_7(%rip), %ymm7   # ymm7 = [90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105]
	vmovdqa	.LCPI8_8(%rip), %ymm8   # ymm8 = [106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121]
	vmovdqa	.LCPI8_9(%rip), %ymm9   # ymm9 = [122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137]
	vmovdqa	.LCPI8_10(%rip), %ymm10 # ymm10 = [138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153]
	vmovdqa	.LCPI8_11(%rip), %ymm11 # ymm11 = [154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169]
	vmovdqa	.LCPI8_12(%rip), %ymm12 # ymm12 = [170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185]
	vmovdqa	.LCPI8_13(%rip), %ymm13 # ymm13 = [186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201]
	vmovdqa	.LCPI8_14(%rip), %ymm14 # ymm14 = [202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217]
	vmovdqa	.LCPI8_15(%rip), %ymm15 # ymm15 = [218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233]
	vmovdqa	.LCPI8_16(%rip), %ymm0  # ymm0 = [234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249]
	vmovdqa	.LCPI8_17(%rip), %ymm1  # ymm1 = [250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265]
	.p2align	4, 0x90
.LBB8_1:                                # =>This Inner Loop Header: Depth=1
	vmovd	%eax, %xmm2
	vpbroadcastd	%xmm2, %ymm2
	vpshufb	.LCPI8_0(%rip), %ymm2, %ymm2 # ymm2 = ymm2[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
	vpermq	$232, %ymm2, %ymm2      # ymm2 = ymm2[0,2,2,3]
	vinserti128	$1, %xmm2, %ymm2, %ymm2
	vpaddw	.LCPI8_1(%rip), %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -480(%rdi)
	vpaddw	.LCPI8_2(%rip), %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -448(%rdi)
	vpaddw	.LCPI8_4(%rip), %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -416(%rdi)
	vpaddw	%ymm5, %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -384(%rdi)
	vpaddw	%ymm6, %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -352(%rdi)
	vpaddw	%ymm7, %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -320(%rdi)
	vpaddw	%ymm8, %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -288(%rdi)
	vpaddw	%ymm9, %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -256(%rdi)
	vpaddw	%ymm10, %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -224(%rdi)
	vpaddw	%ymm11, %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -192(%rdi)
	vpaddw	%ymm12, %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -160(%rdi)
	vpaddw	%ymm13, %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -128(%rdi)
	vpaddw	%ymm14, %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -96(%rdi)
	vpaddw	%ymm15, %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -64(%rdi)
	vpaddw	%ymm0, %ymm2, %ymm4
	vpand	%ymm3, %ymm4, %ymm4
	vmovdqu	%ymm4, -32(%rdi)
	vpaddw	%ymm1, %ymm2, %ymm2
	vpand	%ymm3, %ymm2, %ymm2
	vmovdqu	%ymm2, (%rdi)
	addq	$1, %rax
	addq	$512, %rdi              # imm = 0x200
	cmpq	$256, %rax              # imm = 0x100
	jne	.LBB8_1
# %bb.2:
	vzeroupper
	retq
.Lfunc_end8:
	.size	assignMatrixui16, .Lfunc_end8-assignMatrixui16
	.cfi_endproc
                                        # -- End function
	.globl	assignMatrixi8          # -- Begin function assignMatrixi8
	.p2align	4, 0x90
	.type	assignMatrixi8,@function
assignMatrixi8:                         # @assignMatrixi8
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB9_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_2 Depth 2
	xorl	%r12d, %r12d
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB9_2:                                #   Parent Loop BB9_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	rand
	movl	%eax, %ecx
	shrl	$31, %ecx
	addl	%eax, %ecx
	andl	$254, %ecx
	subl	%ecx, %eax
	addb	%r12b, %al
	movb	%al, (%r14,%rbx)
	addq	$1, %rbx
	addb	%r15b, %r12b
	cmpq	$256, %rbx              # imm = 0x100
	jne	.LBB9_2
# %bb.3:                                #   in Loop: Header=BB9_1 Depth=1
	addq	$1, %r15
	addq	$256, %r14              # imm = 0x100
	cmpq	$256, %r15              # imm = 0x100
	jne	.LBB9_1
# %bb.4:
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end9:
	.size	assignMatrixi8, .Lfunc_end9-assignMatrixi8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5               # -- Begin function assignArrayi32
.LCPI10_0:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
.LCPI10_1:
	.long	1234                    # 0x4d2
	.long	1235                    # 0x4d3
	.long	1236                    # 0x4d4
	.long	1237                    # 0x4d5
	.long	1238                    # 0x4d6
	.long	1239                    # 0x4d7
	.long	1240                    # 0x4d8
	.long	1241                    # 0x4d9
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI10_2:
	.long	274877907               # 0x10624dd3
.LCPI10_3:
	.long	1000                    # 0x3e8
.LCPI10_4:
	.long	8                       # 0x8
.LCPI10_5:
	.long	16                      # 0x10
.LCPI10_6:
	.long	24                      # 0x18
.LCPI10_7:
	.long	32                      # 0x20
	.text
	.globl	assignArrayi32
	.p2align	4, 0x90
	.type	assignArrayi32,@function
assignArrayi32:                         # @assignArrayi32
	.cfi_startproc
# %bb.0:
	vmovdqa	.LCPI10_0(%rip), %ymm0  # ymm0 = [0,1,2,3,4,5,6,7]
	vmovdqa	.LCPI10_1(%rip), %ymm1  # ymm1 = [1234,1235,1236,1237,1238,1239,1240,1241]
	xorl	%eax, %eax
	vpbroadcastd	.LCPI10_2(%rip), %ymm2 # ymm2 = [274877907,274877907,274877907,274877907,274877907,274877907,274877907,274877907]
	vpbroadcastd	.LCPI10_3(%rip), %ymm3 # ymm3 = [1000,1000,1000,1000,1000,1000,1000,1000]
	vpbroadcastd	.LCPI10_4(%rip), %ymm4 # ymm4 = [8,8,8,8,8,8,8,8]
	vpbroadcastd	.LCPI10_5(%rip), %ymm5 # ymm5 = [16,16,16,16,16,16,16,16]
	vpbroadcastd	.LCPI10_6(%rip), %ymm6 # ymm6 = [24,24,24,24,24,24,24,24]
	vpbroadcastd	.LCPI10_7(%rip), %ymm7 # ymm7 = [32,32,32,32,32,32,32,32]
	.p2align	4, 0x90
.LBB10_1:                               # =>This Inner Loop Header: Depth=1
	vpmulld	%ymm0, %ymm1, %ymm8
	vpshufd	$245, %ymm8, %ymm9      # ymm9 = ymm8[1,1,3,3,5,5,7,7]
	vpmuludq	%ymm2, %ymm9, %ymm9
	vpmuludq	%ymm2, %ymm8, %ymm10
	vpshufd	$245, %ymm10, %ymm10    # ymm10 = ymm10[1,1,3,3,5,5,7,7]
	vpblendd	$170, %ymm9, %ymm10, %ymm9 # ymm9 = ymm10[0],ymm9[1],ymm10[2],ymm9[3],ymm10[4],ymm9[5],ymm10[6],ymm9[7]
	vpsrld	$6, %ymm9, %ymm9
	vpmulld	%ymm3, %ymm9, %ymm9
	vpsubd	%ymm9, %ymm8, %ymm8
	vmovdqu	%ymm8, (%rdi,%rax,4)
	vpaddd	%ymm4, %ymm1, %ymm8
	vpaddd	%ymm4, %ymm0, %ymm9
	vpmulld	%ymm9, %ymm8, %ymm8
	vpshufd	$245, %ymm8, %ymm9      # ymm9 = ymm8[1,1,3,3,5,5,7,7]
	vpmuludq	%ymm2, %ymm9, %ymm9
	vpmuludq	%ymm2, %ymm8, %ymm10
	vpshufd	$245, %ymm10, %ymm10    # ymm10 = ymm10[1,1,3,3,5,5,7,7]
	vpblendd	$170, %ymm9, %ymm10, %ymm9 # ymm9 = ymm10[0],ymm9[1],ymm10[2],ymm9[3],ymm10[4],ymm9[5],ymm10[6],ymm9[7]
	vpsrld	$6, %ymm9, %ymm9
	vpmulld	%ymm3, %ymm9, %ymm9
	vpsubd	%ymm9, %ymm8, %ymm8
	vmovdqu	%ymm8, 32(%rdi,%rax,4)
	vpaddd	%ymm5, %ymm1, %ymm8
	vpaddd	%ymm5, %ymm0, %ymm9
	vpmulld	%ymm9, %ymm8, %ymm8
	vpshufd	$245, %ymm8, %ymm9      # ymm9 = ymm8[1,1,3,3,5,5,7,7]
	vpmuludq	%ymm2, %ymm9, %ymm9
	vpmuludq	%ymm2, %ymm8, %ymm10
	vpshufd	$245, %ymm10, %ymm10    # ymm10 = ymm10[1,1,3,3,5,5,7,7]
	vpblendd	$170, %ymm9, %ymm10, %ymm9 # ymm9 = ymm10[0],ymm9[1],ymm10[2],ymm9[3],ymm10[4],ymm9[5],ymm10[6],ymm9[7]
	vpsrld	$6, %ymm9, %ymm9
	vpmulld	%ymm3, %ymm9, %ymm9
	vpsubd	%ymm9, %ymm8, %ymm8
	vmovdqu	%ymm8, 64(%rdi,%rax,4)
	vpaddd	%ymm6, %ymm1, %ymm8
	vpaddd	%ymm6, %ymm0, %ymm9
	vpmulld	%ymm9, %ymm8, %ymm8
	vpshufd	$245, %ymm8, %ymm9      # ymm9 = ymm8[1,1,3,3,5,5,7,7]
	vpmuludq	%ymm2, %ymm9, %ymm9
	vpmuludq	%ymm2, %ymm8, %ymm10
	vpshufd	$245, %ymm10, %ymm10    # ymm10 = ymm10[1,1,3,3,5,5,7,7]
	vpblendd	$170, %ymm9, %ymm10, %ymm9 # ymm9 = ymm10[0],ymm9[1],ymm10[2],ymm9[3],ymm10[4],ymm9[5],ymm10[6],ymm9[7]
	vpsrld	$6, %ymm9, %ymm9
	vpmulld	%ymm3, %ymm9, %ymm9
	vpsubd	%ymm9, %ymm8, %ymm8
	vmovdqu	%ymm8, 96(%rdi,%rax,4)
	addq	$32, %rax
	vpaddd	%ymm7, %ymm1, %ymm1
	vpaddd	%ymm7, %ymm0, %ymm0
	cmpq	$65536, %rax            # imm = 0x10000
	jne	.LBB10_1
# %bb.2:
	vzeroupper
	retq
.Lfunc_end10:
	.size	assignArrayi32, .Lfunc_end10-assignArrayi32
	.cfi_endproc
                                        # -- End function
	.globl	savefloatMatrixFileForOutPuts # -- Begin function savefloatMatrixFileForOutPuts
	.p2align	4, 0x90
	.type	savefloatMatrixFileForOutPuts,@function
savefloatMatrixFileForOutPuts:          # @savefloatMatrixFileForOutPuts
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movl	$.L.str.1, %edi
	movl	$.L.str.2, %esi
	callq	fopen
	movq	%rax, fileForOutPuts(%rip)
	movq	programName(%rip), %rdx
	xorl	%r15d, %r15d
	movl	$.L.str.3, %esi
	movq	%rax, %rdi
	movl	$256, %ecx              # imm = 0x100
	movl	$256, %r8d              # imm = 0x100
	xorl	%eax, %eax
	callq	fprintf
	movq	fileForOutPuts(%rip), %rcx
	.p2align	4, 0x90
.LBB11_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_2 Depth 2
	movl	$.L.str.4, %edi
	movl	$2, %esi
	movl	$1, %edx
	callq	fwrite
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB11_2:                               #   Parent Loop BB11_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	fileForOutPuts(%rip), %rdi
	vmovss	(%r14,%rbx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movl	$.L.str.5, %esi
	movl	%r15d, %edx
	movl	%ebx, %ecx
	movb	$1, %al
	callq	fprintf
	addq	$1, %rbx
	cmpq	$256, %rbx              # imm = 0x100
	jne	.LBB11_2
# %bb.3:                                #   in Loop: Header=BB11_1 Depth=1
	addq	$1, %r15
	movq	fileForOutPuts(%rip), %rcx
	addq	$1024, %r14             # imm = 0x400
	cmpq	$256, %r15              # imm = 0x100
	jne	.LBB11_1
# %bb.4:
	movl	$.L.str.6, %edi
	movl	$98, %esi
	movl	$1, %edx
	callq	fwrite
	movq	fileForOutPuts(%rip), %rdi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	fclose                  # TAILCALL
.Lfunc_end11:
	.size	savefloatMatrixFileForOutPuts, .Lfunc_end11-savefloatMatrixFileForOutPuts
	.cfi_endproc
                                        # -- End function
	.globl	savefloatMatrixFileName # -- Begin function savefloatMatrixFileName
	.p2align	4, 0x90
	.type	savefloatMatrixFileName,@function
savefloatMatrixFileName:                # @savefloatMatrixFileName
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rax
	movq	%rdi, %r14
	movl	$.L.str.2, %esi
	movq	%rax, %rdi
	callq	fopen
	movq	%rax, fileForOutPuts(%rip)
	movq	programName(%rip), %rdx
	xorl	%r15d, %r15d
	movl	$.L.str.3, %esi
	movq	%rax, %rdi
	movl	$256, %ecx              # imm = 0x100
	movl	$256, %r8d              # imm = 0x100
	xorl	%eax, %eax
	callq	fprintf
	movq	fileForOutPuts(%rip), %rcx
	.p2align	4, 0x90
.LBB12_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_2 Depth 2
	movl	$.L.str.4, %edi
	movl	$2, %esi
	movl	$1, %edx
	callq	fwrite
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB12_2:                               #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	fileForOutPuts(%rip), %rdi
	vmovss	(%r14,%rbx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movl	$.L.str.5, %esi
	movl	%r15d, %edx
	movl	%ebx, %ecx
	movb	$1, %al
	callq	fprintf
	addq	$1, %rbx
	cmpq	$256, %rbx              # imm = 0x100
	jne	.LBB12_2
# %bb.3:                                #   in Loop: Header=BB12_1 Depth=1
	addq	$1, %r15
	movq	fileForOutPuts(%rip), %rcx
	addq	$1024, %r14             # imm = 0x400
	cmpq	$256, %r15              # imm = 0x100
	jne	.LBB12_1
# %bb.4:
	movl	$.L.str.6, %edi
	movl	$98, %esi
	movl	$1, %edx
	callq	fwrite
	movq	fileForOutPuts(%rip), %rdi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	fclose                  # TAILCALL
.Lfunc_end12:
	.size	savefloatMatrixFileName, .Lfunc_end12-savefloatMatrixFileName
	.cfi_endproc
                                        # -- End function
	.globl	saveintMatrixFileForOutPuts # -- Begin function saveintMatrixFileForOutPuts
	.p2align	4, 0x90
	.type	saveintMatrixFileForOutPuts,@function
saveintMatrixFileForOutPuts:            # @saveintMatrixFileForOutPuts
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movl	$.L.str.1, %edi
	movl	$.L.str.2, %esi
	callq	fopen
	movq	%rax, fileForOutPuts(%rip)
	movq	programName(%rip), %rdx
	movl	$.L.str.3, %esi
	movq	%rax, %rdi
	movl	$256, %ecx              # imm = 0x100
	movl	$256, %r8d              # imm = 0x100
	xorl	%eax, %eax
	callq	fprintf
	movq	fileForOutPuts(%rip), %rcx
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB13_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_2 Depth 2
	movl	$.L.str.4, %edi
	movl	$2, %esi
	movl	$1, %edx
	callq	fwrite
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB13_2:                               #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	fileForOutPuts(%rip), %rdi
	movl	(%r14,%rbx,4), %r8d
	movl	$.L.str.7, %esi
	movl	%r15d, %edx
	movl	%ebx, %ecx
	xorl	%eax, %eax
	callq	fprintf
	addq	$1, %rbx
	cmpq	$256, %rbx              # imm = 0x100
	jne	.LBB13_2
# %bb.3:                                #   in Loop: Header=BB13_1 Depth=1
	addq	$1, %r15
	movq	fileForOutPuts(%rip), %rcx
	addq	$1024, %r14             # imm = 0x400
	cmpq	$256, %r15              # imm = 0x100
	jne	.LBB13_1
# %bb.4:
	movl	$.L.str.6, %edi
	movl	$98, %esi
	movl	$1, %edx
	callq	fwrite
	movq	fileForOutPuts(%rip), %rdi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	fclose                  # TAILCALL
.Lfunc_end13:
	.size	saveintMatrixFileForOutPuts, .Lfunc_end13-saveintMatrixFileForOutPuts
	.cfi_endproc
                                        # -- End function
	.globl	saveintMatrixFileName   # -- Begin function saveintMatrixFileName
	.p2align	4, 0x90
	.type	saveintMatrixFileName,@function
saveintMatrixFileName:                  # @saveintMatrixFileName
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rax
	movq	%rdi, %r14
	movl	$.L.str.2, %esi
	movq	%rax, %rdi
	callq	fopen
	movq	%rax, fileForOutPuts(%rip)
	movq	programName(%rip), %rdx
	movl	$.L.str.3, %esi
	movq	%rax, %rdi
	movl	$256, %ecx              # imm = 0x100
	movl	$256, %r8d              # imm = 0x100
	xorl	%eax, %eax
	callq	fprintf
	movq	fileForOutPuts(%rip), %rcx
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB14_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_2 Depth 2
	movl	$.L.str.4, %edi
	movl	$2, %esi
	movl	$1, %edx
	callq	fwrite
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB14_2:                               #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	fileForOutPuts(%rip), %rdi
	movl	(%r14,%rbx,4), %r8d
	movl	$.L.str.7, %esi
	movl	%r15d, %edx
	movl	%ebx, %ecx
	xorl	%eax, %eax
	callq	fprintf
	addq	$1, %rbx
	cmpq	$256, %rbx              # imm = 0x100
	jne	.LBB14_2
# %bb.3:                                #   in Loop: Header=BB14_1 Depth=1
	addq	$1, %r15
	movq	fileForOutPuts(%rip), %rcx
	addq	$1024, %r14             # imm = 0x400
	cmpq	$256, %r15              # imm = 0x100
	jne	.LBB14_1
# %bb.4:
	movl	$.L.str.6, %edi
	movl	$98, %esi
	movl	$1, %edx
	callq	fwrite
	movq	fileForOutPuts(%rip), %rdi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	fclose                  # TAILCALL
.Lfunc_end14:
	.size	saveintMatrixFileName, .Lfunc_end14-saveintMatrixFileName
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5               # -- Begin function main
.LCPI15_0:
	.long	1                       # 0x1
	.long	3                       # 0x3
	.long	5                       # 0x5
	.long	7                       # 0x7
	.long	9                       # 0x9
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	15                      # 0xf
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI15_1:
	.long	16                      # 0x10
.LCPI15_2:
	.long	32                      # 0x20
.LCPI15_3:
	.long	48                      # 0x30
.LCPI15_4:
	.long	64                      # 0x40
.LCPI15_5:
	.long	80                      # 0x50
.LCPI15_6:
	.long	96                      # 0x60
.LCPI15_7:
	.long	112                     # 0x70
.LCPI15_8:
	.long	128                     # 0x80
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	pushq	%rax
	.cfi_def_cfa_offset 16
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%ymm0, mask+96(%rip)
	vmovups	%ymm0, mask+72(%rip)
	vmovups	%ymm0, mask+40(%rip)
	vmovups	%ymm0, mask+8(%rip)
	movq	$12, mask(%rip)
	movl	$128, %esi
	movl	$mask, %edx
	xorl	%edi, %edi
	vzeroupper
	callq	sched_setaffinity
	movq	$.L.str.8, programName(%rip)
	movq	$999999, elapsed_rdtsc(%rip) # imm = 0xF423F
	movabsq	$9999999999, %rax       # imm = 0x2540BE3FF
	movq	%rax, overal_time(%rip)
	movq	$0, ttime(%rip)
	vmovdqa	.LCPI15_0(%rip), %ymm0  # ymm0 = [1,3,5,7,9,11,13,15]
	vpbroadcastd	.LCPI15_1(%rip), %ymm1 # ymm1 = [16,16,16,16,16,16,16,16]
	vpbroadcastd	.LCPI15_2(%rip), %ymm2 # ymm2 = [32,32,32,32,32,32,32,32]
	vpbroadcastd	.LCPI15_3(%rip), %ymm3 # ymm3 = [48,48,48,48,48,48,48,48]
	vpbroadcastd	.LCPI15_4(%rip), %ymm4 # ymm4 = [64,64,64,64,64,64,64,64]
	vpbroadcastd	.LCPI15_5(%rip), %ymm5 # ymm5 = [80,80,80,80,80,80,80,80]
	vpbroadcastd	.LCPI15_6(%rip), %ymm6 # ymm6 = [96,96,96,96,96,96,96,96]
	vpbroadcastd	.LCPI15_7(%rip), %ymm7 # ymm7 = [112,112,112,112,112,112,112,112]
	vpbroadcastd	.LCPI15_8(%rip), %ymm8 # ymm8 = [128,128,128,128,128,128,128,128]
	.p2align	4, 0x90
.LBB15_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_2 Depth 2
	#APP
	#mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm1
	#NO_APP
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	movq	%rdx, t1_rdtsc(%rip)
	vmovdqa	%ymm0, a(%rip)
	movl	$64, %eax
	vmovdqa	%ymm0, %ymm9
	jmp	.LBB15_2
	.p2align	4, 0x90
.LBB15_9:                               #   in Loop: Header=BB15_2 Depth=2
	vpaddd	%ymm8, %ymm9, %ymm9
	vmovdqa	%ymm9, a(,%rax,4)
	addq	$64, %rax
.LBB15_2:                               #   Parent Loop BB15_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vpaddd	%ymm1, %ymm9, %ymm10
	vmovdqa	%ymm10, a-224(,%rax,4)
	vpaddd	%ymm2, %ymm9, %ymm10
	vmovdqa	%ymm10, a-192(,%rax,4)
	vpaddd	%ymm3, %ymm9, %ymm10
	vmovdqa	%ymm10, a-160(,%rax,4)
	vpaddd	%ymm4, %ymm9, %ymm10
	vmovdqa	%ymm10, a-128(,%rax,4)
	vpaddd	%ymm5, %ymm9, %ymm10
	vmovdqa	%ymm10, a-96(,%rax,4)
	vpaddd	%ymm6, %ymm9, %ymm10
	vmovdqa	%ymm10, a-64(,%rax,4)
	vpaddd	%ymm7, %ymm9, %ymm10
	vmovdqa	%ymm10, a-32(,%rax,4)
	cmpq	$65535, %rax            # imm = 0xFFFF
	jb	.LBB15_9
# %bb.3:                                #   in Loop: Header=BB15_1 Depth=1
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	movq	%rdx, t2_rdtsc(%rip)
	#APP
	#mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm2
	#NO_APP
	movq	t2_rdtsc(%rip), %rax
	subq	t1_rdtsc(%rip), %rax
	movq	%rax, ttotal_rdtsc(%rip)
	movq	ttbest_rdtsc(%rip), %rsi
	cmpq	%rsi, %rax
	jge	.LBB15_5
# %bb.4:                                #   in Loop: Header=BB15_1 Depth=1
	movq	%rax, ttbest_rdtsc(%rip)
	movq	elapsed_rdtsc(%rip), %rdi
	movl	$999999, %ecx           # imm = 0xF423F
	subq	%rdi, %rcx
	movq	%rcx, elapsed(%rip)
	movq	%rax, %rsi
	jmp	.LBB15_6
	.p2align	4, 0x90
.LBB15_5:                               #   in Loop: Header=BB15_1 Depth=1
	movq	elapsed_rdtsc(%rip), %rdi
.LBB15_6:                               #   in Loop: Header=BB15_1 Depth=1
	addq	ttime(%rip), %rax
	movq	%rax, ttime(%rip)
	leaq	-1(%rdi), %rcx
	movq	%rcx, elapsed_rdtsc(%rip)
	testq	%rdi, %rdi
	je	.LBB15_8
# %bb.7:                                #   in Loop: Header=BB15_1 Depth=1
	cmpq	overal_time(%rip), %rax
	jl	.LBB15_1
.LBB15_8:
	movq	elapsed(%rip), %rdx
	movl	$1000000, %ecx          # imm = 0xF4240
	subq	%rdi, %rcx
	movl	$.L.str.9, %edi
	xorl	%eax, %eax
	vzeroupper
	callq	printf
	movl	$.L.str.10, %edi
	movl	$.L.str.11, %esi
	callq	fopen
	movq	%rax, fileForSpeedups(%rip)
	movq	programName(%rip), %rdx
	movq	ttbest_rdtsc(%rip), %r9
	movl	$.L.str.12, %esi
	movq	%rax, %rdi
	movl	$256, %ecx              # imm = 0x100
	movl	$256, %r8d              # imm = 0x100
	xorl	%eax, %eax
	callq	fprintf
	xorl	%eax, %eax
	popq	%rcx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end15:
	.size	main, .Lfunc_end15-main
	.cfi_endproc
                                        # -- End function
	.type	fileForSpeedups,@object # @fileForSpeedups
	.bss
	.globl	fileForSpeedups
	.p2align	3
fileForSpeedups:
	.quad	0
	.size	fileForSpeedups, 8

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	" "
	.size	.L.str, 2

	.type	programName,@object     # @programName
	.data
	.globl	programName
	.p2align	3
programName:
	.quad	.L.str
	.size	programName, 8

	.type	ttbest_rdtsc,@object    # @ttbest_rdtsc
	.globl	ttbest_rdtsc
	.p2align	3
ttbest_rdtsc:
	.quad	99999999999999999       # 0x16345785d89ffff
	.size	ttbest_rdtsc, 8

	.type	elapsed_rdtsc,@object   # @elapsed_rdtsc
	.globl	elapsed_rdtsc
	.p2align	3
elapsed_rdtsc:
	.quad	999999                  # 0xf423f
	.size	elapsed_rdtsc, 8

	.type	overal_time,@object     # @overal_time
	.globl	overal_time
	.p2align	3
overal_time:
	.quad	9999999999              # 0x2540be3ff
	.size	overal_time, 8

	.type	ttime,@object           # @ttime
	.bss
	.globl	ttime
	.p2align	3
ttime:
	.quad	0                       # 0x0
	.size	ttime, 8

	.type	mask,@object            # @mask
	.comm	mask,128,8
	.type	fileForOutPuts,@object  # @fileForOutPuts
	.globl	fileForOutPuts
	.p2align	3
fileForOutPuts:
	.quad	0
	.size	fileForOutPuts, 8

	.type	.L.str.1,@object        # @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"fileForOutPuts"
	.size	.L.str.1, 15

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"w"
	.size	.L.str.2, 2

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"%s - %dx%d \n"
	.size	.L.str.3, 13

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"\n\n"
	.size	.L.str.4, 3

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	" A[%d][%d] = %lf, \n"
	.size	.L.str.5, 20

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	" \n*************************\n*********************FINISHED*********************\n***************** \n"
	.size	.L.str.6, 99

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	" A[%d][%d] = %d, \n"
	.size	.L.str.7, 19

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"AIC3"
	.size	.L.str.8, 5

	.type	t1_rdtsc,@object        # @t1_rdtsc
	.comm	t1_rdtsc,8,8
	.type	a,@object               # @a
	.comm	a,262144,32
	.type	t2_rdtsc,@object        # @t2_rdtsc
	.comm	t2_rdtsc,8,8
	.type	ttotal_rdtsc,@object    # @ttotal_rdtsc
	.comm	ttotal_rdtsc,8,8
	.type	elapsed,@object         # @elapsed
	.comm	elapsed,8,8
	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"\nthe best is %lld in %lldth iteration and %lld repetitions\n"
	.size	.L.str.9, 60

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"fileForSpeedups"
	.size	.L.str.10, 16

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"a"
	.size	.L.str.11, 2

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"%s, %dx%d, %lld\n"
	.size	.L.str.12, 17

	.type	mask1,@object           # @mask1
	.comm	mask1,128,8
	.type	temp8,@object           # @temp8
	.comm	temp8,32,32
	.type	temp2i16,@object        # @temp2i16
	.comm	temp2i16,32,32

	.ident	"clang version 8.0.0 (Fedora 8.0.0-1.fc30)"
	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym mask
